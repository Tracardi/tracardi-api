{"file_name": "docs/ai/templates/code_docs.md", "questions": ["General Question:", "- What are the different fields being updated in the session object?", "Specific Questions:", "- How is the session's device color depth set?", "- What is the process for updating the session's location?", "- How is the GEO location fetched for a session with an IP?"], "answer": "ayload.context['screen']['local']['height']}\"\n                except KeyError:\n                    pass\n\n                try:\n                    session.device.color_depth = int(tracker_payload.context['screen']['local']['colorDepth'])\n                except KeyError:\n                    pass\n\n                try:\n                    session.device.orientation = tracker_payload.context['screen']['local']['orientation']\n                except KeyError:\n                    pass\n\n                session.app.bot = user_agent.is_bot\n                session.app.name = user_agent.browser.family  # returns 'Mobile Safari'\n                session.app.version = user_agent.browser.version_string\n                session.app.type = \"browser\"\n\n                if 'utm' in tracker_payload.context:\n                    try:\n                        session.utm = UTM(**tracker_payload.context['utm'])\n                        del tracker_payload.context['utm']\n                    except ValidationError:\n                        pass\n\n                # session.app.resolution = session.context['screen']\n\n            except Exception as e:\n                pass\n\n            try:\n                session.device.ip = tracker_payload.request['headers']['x-forwarded-for']\n            except Exception:\n                pass\n\n            try:\n                session.app.language = session.context['browser']['local']['browser']['language']\n            except Exception:\n                pass\n\n        # Updates on EXISTING Session\n\n        if 'location' in tracker_payload.context:\n\n            try:\n                _geo = Geo(**tracker_payload.context['location'])\n\n                del tracker_payload.context['location']\n\n                # If location is sent but not available in session - update session\n\n                if session.device.geo.is_empty():\n                    session.device.geo = _geo\n                    session.operation.update = True\n\n                # Add last geo to profile\n                if profile.data.devices.last.geo.is_empty() or _geo != profile.data.devices.last.geo:\n                    profile.data.devices.last.geo = _geo\n                    profile.operation.update = True\n\n            except ValidationError as e:\n                logger.error(str(e))\n\n        # Still no geo location, bu twe have IP\n        if session.device.ip:\n\n            # Check if no MAXMIND_API_KEY\n            maxmind_license_key = os.environ.get('MAXMIND_LICENSE_KEY', None)\n            maxmind_account_id = int(os.environ.get('MAXMIND_ACCOUNT_ID', 0))\n            if maxmind_license_key and maxmind_account_id > 0:\n\n                if profile.data.devices.last.geo.is_empty():\n                    # If last geo of a profile is empty\n\n                    _geo = await get_geo_location(GeoLiteCredentials(\n                        license=maxmind_license_key,\n                        accountId=maxmind_account_id), ip=session.device.ip)\n\n                    profile.data.devices.last.geo = _geo\n                    profile.operation.update = True\n\n                elif session.operation.new:\n\n                    logger.info(f\"Fetching GEO location for {session.device.ip}\")\n\n                    try:\n                        _geo = await get_geo_location(GeoLiteCredentials(\n                            license=maxmind_license_key,\n                            accountId=maxmind_account_id), ip=session.device.ip)\n\n                        session.device.geo = _geo\n\n                        if profile.data.devices.last.geo.is_empty() or _geo != profile.data.devices.last.geo:\n                            profile.data.devices.last.geo = _geo\n                            profile.operation.update = True\n\n                    except Exception as e:\n                        logger.error(f\"Could not fetch GEO location. Error: {str(e)}\")\n", "hash": "1d67edeffbd2ecec03cdd063fcb856d740a1b9a7"}