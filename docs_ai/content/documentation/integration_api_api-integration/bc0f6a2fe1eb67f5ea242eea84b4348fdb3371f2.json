{"file_name": "docs/integration/api/api-integration.md", "questions": ["Main question: How to integrate Tracardi with a web page or other systems using the Tracardi endpoint?", "1. What is the format for sending events via the `/track` endpoint in Tracardi?", "2. What are the required fields in the tracker payload when sending events to Tracardi?", "3. How can multiple events be collected in one request to Tracardi?"], "answer": "# Tracardi integration\nIntegrating Tracardi with a web page or other systems is easy by calling the Tracardi endpoint.\n\nEvents can be sent via the `/track` endpoint using the POST method in the following JSON format:\n\n```json\n{\n  \"source\": {\n    \"id\": \"Source ID\"\n  },\n  \"session\": {\n    \"id\": \"Session ID\"\n  },\n  \"profile\": {\n    \"id\": \"Profile ID\"\n  },\n  \"context\": {\n    // Context data\n  },\n  \"properties\": {},\n  \"events\": [\n    {\n      \"type\": \"event-type\",\n      \"properties\": {\n        // Event properties\n      },\n      \"options\": {\n        // Event options\n      },\n      \"context\": {\n        // Additional context data\n      }\n    },\n    ...\n  ],\n  \"options\": {}\n}\n```\n\nThe above data is referred to as the \"tracker payload\" in Tracardi documentation and consists of the following data:\n\n* __source.id__ - this is the UUID that identifies the source. It must match the source ID that is defined in Tracardi.\n  Otherwise, the system will return an \"Unauthorized Access\" response.\n* __session.id__ - it is a UUID generated and saved on the client's side. Whenever the session changes or a new customer\n  visit starts, a new session ID is generated.\n* __profile.id__ - this is the UUID of the profile ID. The profile ID must remain unchanged during the entire customer\n  journey. The profile ID is generated on the server side. When the first event is sent to Tracardi, the system will\n  return a generated profile ID that needs to be saved by the client (browser or mobile device) and resent with each\n  subsequent event. Tracardi has several algorithms that try to keep the profile ID unchanged during the entire customer\n  journey. Some of those algorithms will be described below.\n* __context__ - this is a JSON data that describes the context of the event. It can be an agent type, e.g. mobile app\n  name, service name. This part is defined by the user.\n* __events__ - this is a collection of event objects called [Event Payload](event_payload.md), that consist of: type,\n  properties, context, time, tags, and options. See [here](event_payload.md) for more details.\n* __options__ - this is a key-value store for additional options.\n\nTracardi can collect several events in one request. That's why we define a list of objects in the events key. Each event\nmay have different context and can also inherit values from the tracker payload. Here's an example of the tracker\npayload that could be sent to Tracardi.\n\n```json\n{\n  \"source\": {\n    \"id\": \"3ee63fc6-490a-4fd8-bfb3-bf0c8c8d3387\"\n  },\n  \"session\": {\n    \"id\": \"bfb3-bf0c8c8d3387-3ee63fc6-490a-4fd8\"\n  },\n  \"profile\": {\n    \"id\": \"bf0c8c8d3387-3ee63fc6-490a-4fd8bfb3\"\n  },\n  \"context\": {\n    \"system\": \"webstore-backend\",\n    \"webstore\": {\n      \"url\": \"http://magento-store.com\",\n      \"name\": \"Shoe store\"\n    },\n    \"client\": {\n      \"browser\": \"Mozilla Firefox\"\n    }\n  },\n  \"properties\": {},\n  \"events\": [\n    {\n      \"type\": \"page-view\",\n      \"properties\": {\n        \"pageTitle\": \"My Page\"\n      },\n      \"options\": {\n        \"saveEvent\": false,\n        \"saveSession\": false,\n        \"debugger\": false\n      },\n      \"context\": {\n        \"tag\": \"product-details-page\"\n      }\n    },\n    {\n      \"type\": \"consent-granted\",\n      \"properties\": {\n        \"marketing\": false,\n        \"general\": true\n      },\n      \"options\": {\n        \"profile\": true,\n        \"saveSession\": false\n      }\n    },\n    {\n      \"type\": \"product-in-basket\",\n      \"properties\": {\n        \"product\": \"Adidas sneakers\",\n        \"price\": 34.43\n      },\n      \"options\": {\n        \"profile\": false,\n        \"logs\": false\n      }\n    }\n  ],\n  \"options\": {}\n}\n```\n\nThis is a full-fledged tracker payload with a lot of data. But not all the fields are required.\n\nThe required fields are:\n\n* `source.id`, `session.id`, `profile.id` - if exists, and collection of `events`\n\nMinimalistic tracker payload could look like this:\n\n```json\n{\n  \"source\": {\n    \"id\": \"f14dc4b1-8dd8-4fc1-bd14-d6823ba7013e\"\n  },\n  \"session\": {\n    \"id\": \"d6823ba7013e-8dd8-4fc1-bd14-f14d", "hash": "bc0f6a2fe1eb67f5ea242eea84b4348fdb3371f2"}