{"file_name": "docs/qa/how_system_process_event_context.md", "questions": ["1. Question covering the whole content:", "- How does Tracardi process event context?", "2. Optional questions covering specific parts of the text:", "- How does Tracardi determine if a session is new?", "- What information does Tracardi retrieve from the session's user agent data?", "- How does Tracardi determine the spoken languages and map them to the session's language context?"], "answer": "# How tracardi process event context\nThis documentation describes in detail how Tracardi retrieves event context and profile geo location, utm parameters, etc.\n\n## Description\n\nThe code for retrieving the profile's geo location in Tracardi follows the following steps:\n\n1. It first checks if the session is new by evaluating the `session.operation.new` condition. If the session is\n   new, it proceeds with the following steps. If not, it skips the subsequent steps and moves to the next part of the\n   code.\n\n2. When a new session is detected, the code adds a \"session-opened\" event to the list of registered events. This event\n   signifies the creation of a new session.\n\n3. The code then retrieves the user agent data from the session's context. The user agent data provides information\n   about the user's browser, device, and operating system. It extracts the user agent string from the session's context\n   and parses it using the `parse` function.\n\n4. From the parsed user agent data, the code extracts various device-related information such as the operating system\n   version, operating system name, and device type. The device type can be \"mobile,\" \"pc,\" \"tablet,\" or \"email\" based on\n   the user agent data.\n\n5. Next, the code checks if the session's context contains additional device information under the \"device\" key. If\n   present, it uses that information to populate the session's device properties such as device name, brand, model,\n   touch capability, and device type. If the session's context does not have device information, the code uses the\n   corresponding values from the parsed user agent data.\n\n6. The code then retrieves the spoken languages from the request headers and the geo country code from the device's geo\n   information. It looks for the \"accept-language\" header in the tracker payload's request headers and parses the\n   languages using the `parse_accept_language` function. It filters out languages with a length of 2 characters and maps\n   them to the corresponding spoken languages using a predefined dictionary. The code also checks if the device's geo\n   information includes a country code and maps it to spoken languages using the same dictionary. The resulting spoken\n   languages are set as the session's language context and stored in the profile's \"pii.language.spoken\" field.\n\n7. If the profile's auxiliary data does not contain a \"geo\" field, the code initializes it as an empty dictionary.\n\n8. The code determines the continent based on the timezone information present in the tracker payload's context. It\n   extracts the timezone value and checks if it is in UTC or a specific region. If it is in a specific region, the code\n   splits the timezone string and retrieves the continent. The continent is then stored in the profile's auxiliary data\n   under the \"geo.continent\" key.\n\n9. The code identifies the markets based on the language codes obtained earlier. It checks if the language codes exist\n   in a predefined dictionary that maps language codes to market values. If there are matching market values, they are\n   added to the profile's auxiliary data under the \"geo.markets\" key.\n\n10. The code tries to retrieve additional screen-related information from the tracker payload's context. It retrieves\n    the screen resolution, color depth, and orientation if available, and assigns them to the session's device\n    properties.\n\n11. The code determines if the session's device is a bot by checking the user agent data. If the user agent indicates\n    that it is a bot, the session's \"app.bot\" property is set to `True`.\n\n12. The code extracts the browser name from the user agent data and assigns it to the session's \"app.name\" property. It\n    also retrieves the browser version and assigns it to the session's \"app.version\" property. The session's \"app.type\"\n    property is set to \"browser\" to indicate that it is a browser application.\n\n13. If the tracker payload's context contains UTM parameters, the code creates a UTM object from", "hash": "77662ba42eafc334bfac3e653158f633a06c17a4"}