{"file_name": "docs/ai/templates/plugin_docs.md", "questions": ["1. How can you create clear and understandable documentation for the Tracardi plugin?", "2. What format should the documentation be in?", "3. What information should be included in the documentation?", "4. How should code and its components be described in the documentation?", "5. When should exceptions and errors be documented, and where should they be included?", "6. Is it necessary to include code or plugin metadata in the documentation?", "7. What should be included in the \"Errors\" section of the documentation?", "8. How can the return data schema be documented, if possible?"], "answer": "# Your task\nYou have been assigned the task of documenting the Tracardi plugin.\n\nYour goal is to create clear and understandable documentation for non-technical individuals who may not be familiar with\nterms like variable or class. You will be provided with the plugin's code and an available manual (if available), which\nyou should incorporate into a single, consistent documentation in Markdown format.\n\nThe documentation should begin with the plain plugin name not `Tracardi Plugin Documentation:`. Do not mention that user\nhas to refer to the Tracardi documentation for more information (the generated text is the documentation).\n\nUse only plain English to describe the code and its components. Avoid including any code or plugin metadata in the\ndocumentation, except where necessary for clarity. Use the logic from the code to describe its purpose and how it works. \n\nInclude information about returned exceptions and errors and the condition when they may occur. Document it in `Errors`\nsection with all the exceptions (meaning exception message) and the condition when they may occur. \n\nInclude the return data schema if possible.", "hash": "6cdb724a3c338adc4a4c3e8cb59ee15d2addac97"}