{"file_name": "docs/ai/templates/plugin_docs.md", "questions": ["- How is the main logic of the plugin organized?", "- What is the purpose of the \"run\" method in the plugin?", "- How is the configuration of the plugin defined?", "- What does the \"run\" method return?", "- How can we find the description of the output ports?", "- How can we understand the structure of the Plugin Object?", "- How can we load resources in the code?", "- What is the purpose of the Dot Parser in the code?"], "answer": "# How the code is organized:\nThe main logic of the plugin is located in the \"run\" method, which accepts a dictionary called \"payload\" as input. The\nplugin's configuration is defined in the \"register\" method within the \"Plugin\" object, specifically in the \"spec.init\"\nproperty. To understand the purpose of each configuration key, refer to the \"FormField\" description property found\nwithin the \"Plugin\" property under \"form.group.field.id\". Use the corresponding ID in the FormField description to\nenhance the documentation for the payload. The configuration is used to set up the plugin's functionality.\n\nThe \"run\" method returns a Result object with two properties port and value.\nThe value of the port is the result of executing the plugin. The port describes  the output port  of the plugin in the workflow. \nThe description of the port and its value can be found in the metadata.documentation.outputs section. \n\n## Code parts examples to better understand the code and its structure.\n\nBelow is a detailed description of the Plugin Object (this is only example), which describes the plugin. It includes an example and comments on its properties to help you\nunderstand its structure:\n\n### Plugin object\n\n```python\nPlugin(\n    start: bool = False,  # Indicates whether this is the starting node in the workflow\n    spec = Spec(\n    version='0.8.1', # Plugin version\n    module,  # The module containing the plugin's code\n    className,  # The class name of the plugin\n    inputs=[\"payload\"],  # Input ports\n    outputs=[\"true\", \"false\"],  # Available output ports of the plugin\n    init={  # Initial values of the configuration\n        \"condition\": \"\",\n        \"trigger_once\": False,\n        \"pass_payload\": True,\n        \"ttl\": 0\n    },\n    form=Form(groups=[  # Describes the configuration form\n        FormGroup(\n            name=\"Condition statement\",\n            fields=[  # Form fields\n                FormField(\n                    id=\"condition\",  # The ID that matches the configuration key (e.g., \"condition\" in this example)\n                    name=\"If condition statement\",  # Form field for configuring the \"condition\" key in the init\n                    description=\"Provide a condition for the IF statement. If the condition is met, the payload \"\n                                \"will be returned on the TRUE port; otherwise, the FALSE port is triggered.\",\n                    # Description of the configuration key\n                    component=FormComponent(type=\"textarea\", props={\"label\": \"condition\"})\n                ),\n                ...\n            ]\n        ),\n    ]),\n),\n                         metadata = MetaData(\n    name='If',  # The name of the plugin\n    desc='This is a conditional action that selectively runs a branch of the workflow.',\n    # A brief description of the plugin\n    documentation=Documentation(  # Documentation of plugin ports\n        inputs={  # Input port\n            \"payload\": PortDoc(desc=\"This port accepts a payload object.\")\n        },\n        outputs={  # Output ports\n            \"true\": PortDoc(desc=\"Returns the payload if the defined condition is met.\"),\n            \"false\": PortDoc(desc=\"Returns the payload if the defined condition is NOT met.\")\n        }\n    )\n)\n)\n```\n\n### Loading resources\n\nIf you see the code:\n\n```python\nresource = await resource_db.load(self.config.resource.id)\nself.credentials = resource.credentials.get_credentials(self, output=\"Here is the resource type\")\n```\n\nIt is also may be represented in form:\n\nExample form field:\n```python\nFormField(\n    id=\"resource\",\n    name=\"Resource\",\n    description=\"Resource description\",\n    component=FormComponent(type=\"resource\", props={\"label\": \"Here is the resource type\", \"tag\": \"twilio\"})\n)\n```\nMention it in the documentation. \n\nPlease use the above information to create clear and understandable documentation for the Tracardi plugin.\n\n\n### Dot parser\n\nIf you see the code that does this:\n\n```python\ndot = self._get_dot_accessor(payload)\nconverter = DictTraver", "hash": "d0b82ea85fc874f3545ac87d1775acaaf8e359d6"}