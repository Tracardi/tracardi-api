{"file_name": "docs/ai/templates/plugin_docs.md", "questions": ["- What are the possible errors that can occur in the code?", "- How to add an empty session to an event?", "- What is the purpose of the `AddEmptySessionAction` class?", "- What is the version of the plugin?", "- How to save a session in the database?", "- What is the author of the plugin?"], "answer": "# Errors\n<Put here all possible errors. Put here Exception message (not exception type) theat means if there is ` raise ValueError(\"Profile event sequencing can not be performed without profile. Is this a profile less event?\")` \"Profile event sequencing can not be performed without profile. Is this a profile less event?\" not `ValueError`.\nand after the error the description when it may occur.>\n\n```\n\n---\nHere is the full plugin code:\n\nfrom uuid import uuid4\nfrom tracardi.domain.entity import Entity\nfrom tracardi.domain.event import EventSession\nfrom tracardi.domain.session import Session, SessionMetadata\nfrom tracardi.domain.value_object.operation import Operation\nfrom tracardi.service.plugin.domain.register import Plugin, Spec, MetaData, Documentation, PortDoc\nfrom tracardi.service.plugin.domain.result import Result\nfrom tracardi.service.plugin.runner import ActionRunner\nfrom tracardi.service.storage.driver.elastic import session as session_db\n\n\nclass AddEmptySessionAction(ActionRunner):\n\n    async def run(self, payload: dict, in_edge=None) -> Result:\n\n        session = Session(\n                id=str(uuid4()),\n                profile=Entity(id=self.profile.id) if self.profile is not None else None,\n                metadata=SessionMetadata(),\n                operation=Operation(update=True)\n            )\n        self.session = session\n        self.event.session = EventSession(\n                id=session.id,\n                start=session.metadata.time.insert,\n                duration=session.metadata.time.duration\n            )\n        self.event.operation.update = True\n        self.execution_graph.set_sessions(session)\n        await session_db.save(session)\n\n        self.set_tracker_option(\"saveSession\", True)\n\n        return Result(port='payload', value=payload)\n\n\ndef register() -> Plugin:\n    return Plugin(\n        start=False,\n        spec=Spec(\n            module=__name__,\n            className='AddEmptySessionAction',\n            inputs=[\"payload\"],\n            outputs=['payload'],\n            version='0.7.0',\n            license=\"MIT\",\n            author=\"Risto Kowaczewski\",\n            init=None,\n            form=None,\n\n        ),\n        metadata=MetaData(\n            name='Create empty session',\n            desc='Ads new session to the event. Empty session gets created with random id.',\n            icon='session',\n            group=[\"Operations\"],\n            keywords=['new', 'add', 'create'],\n            documentation=Documentation(\n                inputs={\n                    \"payload\": PortDoc(desc=\"This port takes payload object.\")\n                },\n                outputs={\n                    \"payload\": PortDoc(desc=\"Returns input payload.\")\n                }\n            )\n        )\n    )\n\n\n\nAvailable manual:\n\nNone\n", "hash": "b92350f0d9b5095390a7a34d88d6aaca4820df73"}