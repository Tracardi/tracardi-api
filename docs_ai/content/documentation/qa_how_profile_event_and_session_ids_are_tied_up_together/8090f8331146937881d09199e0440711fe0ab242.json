{"file_name": "docs/qa/how_profile_event_and_session_ids_are_tied_up_together.md", "questions": ["1. How are profile, event, and session IDs tied up together?", "2. What does it mean when events have references to both the profile ID and session ID?", "3. How does the session ID change in the context of web page interaction?", "4. Why is it important to note the behavior of session IDs in debug mode?", "5. What is the impact of the static session ID in debug mode on session-dependent logic?"], "answer": "# How profile, event and session ids are tied up together?\n* Events have references to both the profile ID and session ID.\n* Sessions have references to the profile ID.\n* This means that a profile can be associated with multiple events and sessions (session is basically a visit).\n\nTo illustrate this relationship, consider the following example:\n\nVisit one:\n\n    Event 1, Event 2, and Event 3 are associated with Profile 1 and Session 1.\n\nVisit two:\n\n    Event 4, Event 5, and Event 6 are associated with Profile 1 and Session 2.\n\nThis example demonstrates that the profile is connected to multiple events and multiple sessions. The session ID changes\nwhen the user opens a new browser or visits a new page, representing a new session or visit. However, the session ID\nremains the same between the visits or interactions within a session. In the context of web page the script that is placed\non the wab page is responsible for changing the session ID when the browser is closed. \n\nIt's important to note that the system automatically increments the visit counts in the profile when the session ID\nchanges, reflecting the number of visits or sessions associated with that profile.\n\n## Data Example\n\nVisit one.\n\nEvent tables\n\n|Event ID  | Profile ID | Session ID |\n|----------|------------|------------|\n|1| 1 | 1\n|2| 1 | 1\n|3| 1 | 1\n\nVisit two\n\n|Event ID  | Profile ID | Session ID |\n|----------|------------|------------|\n|4| 1 | 2\n|5| 1 | 2\n|6| 1 | 2\n\nVisit counts in profile are automatically incremented when the session id changes. \n\n## Debugging and Session IDs\n\nWhen utilizing the debug mode in the workflow editor, it's important to note that the behavior of session IDs may differ\nfrom regular operation. In debug mode, the session ID remains the same for every simulated event, which can impact the\nexpected functionality.\n\nDuring debugging, the workflow editor creates a fake event and session to simulate the execution of the workflow. The\nIDs assigned to these debug entities are constant, meaning they don't change with each iteration or interaction. This\nconsistent session ID can affect the expected behavior of the system, as it deviates from the dynamic session ID changes\nthat occur in regular user sessions.\n\nIt's crucial to consider this discrepancy when debugging workflows that involve session-dependent logic or\nfunctionality. If the workflow relies on different session IDs for distinct visits or interactions, the debug mode's\nstatic session ID may not accurately reflect the intended behavior (it will not increase the visits in profile).\n\nTo overcome this limitation, it's recommended to thoroughly test the workflow in a test mode (See test in the left-hand\nmenu). By doing so, you can ensure that\nthe workflow functions as expected under normal conditions, considering the dynamic nature of session IDs in actual user\nsessions.\n\nKeep in mind that the debug mode's static session ID serves the purpose of simplifying the debugging process by\nproviding consistency and predictability. However, it's important to be aware of its impact on session-dependent logic\nwhen transitioning from debug mode to live deployment.\n", "hash": "8090f8331146937881d09199e0440711fe0ab242"}